Here is the final step-by-step plan based on our previous discussions, without adding anything new:


---

1. Plan and Design

Environment Setup:
You have an existing on-premise WebLogic cluster with:

2 Admin Servers.

10 Managed Servers per Admin Server.

A context-based routing server on-premise that routes requests to the Admin Servers.


Goal:
Migrate this setup to AWS ECS while ensuring:

Static IPs for Admin Servers and Managed Servers.

Integration with the on-premise MySQL database and routing server.




---

2. Prepare Docker Images

1. Use Oracleâ€™s WebLogic Docker Image:
Use the official WebLogic image from Oracle's Container Registry for production stability.


2. Build Docker Images:

Create one Docker image for the Admin Server.

Create another Docker image for the Managed Servers.



3. Admin Server Dockerfile:

Base the image on Oracle WebLogic.

Add a script (create_domain.py) to create the WebLogic domain.

Start the Admin Server when the container runs.



4. Managed Server Dockerfile:

Base the image on Oracle WebLogic.

Add a script (create_managed_server.py) to configure the Managed Servers.

Start the Managed Server when the container runs and connect it to the Admin Server.



5. Test Locally:

Run Admin Server and Managed Servers locally using docker run.

Verify the setup by accessing the Admin Console at http://<local-ip>:7001/console.





---

3. Push Images to AWS ECR

1. Authenticate Docker to AWS ECR:

Use the AWS CLI to log in to ECR.



2. Push Docker Images:

Push the Admin Server and Managed Server Docker images to ECR.





---

4. Set Up ECS

1. Create ECS Cluster:

Define an ECS Cluster with sufficient capacity for your Admin and Managed Server tasks.



2. Create Task Definitions:

Create separate ECS Task Definitions for:

Admin Servers (2 tasks, each with a static IP).

Managed Servers (10 tasks per Admin Server).


Configure environment variables for:

Admin Server ports and domain names.

Managed Server names, cluster names, and Admin Server addresses.




3. Run ECS Tasks:

Deploy the tasks to the ECS Cluster.





---

5. Configure Static IPs

1. Elastic Network Interfaces (ENIs):

Assign Elastic IPs to ECS tasks using AWS ECS Task Networking (awsvpc mode).

This ensures each Admin Server and Managed Server has a static private IP or public IP.



2. Test Static IPs:

Verify that ECS tasks are reachable using their assigned Elastic IPs.





---

6. Load Balancing

1. Use On-Premise Routing Server:

Continue using your existing context-based routing server.

Update the routing configuration to point to the new static IPs of the Admin Servers in ECS.



2. Internal Communication:

Ensure Admin Servers can route traffic to their respective Managed Servers within ECS.





---

7. Database Integration

On-Premise MySQL DB:

Allow ECS tasks (Admin and Managed Servers) to access the MySQL database over the network.

Open firewall rules or configure a VPN between your on-premise network and AWS VPC.




---

8. Testing

1. Functional Testing:

Access the Admin Console via the static IP of the Admin Server.

Verify that the Managed Servers are connected to their respective Admin Servers.

Test database connectivity from the Admin Server.



2. Load Testing:

Ensure the ECS Cluster handles expected load across all Managed Servers.



3. Failover Testing:

Test ECS's ability to restart tasks if any Admin Server or Managed Server stops.





---

9. Monitoring and Maintenance

1. ECS Monitoring:

Set up CloudWatch to monitor ECS tasks and WebLogic logs.



2. Health Checks:

Define health checks for ECS tasks to automatically restart unhealthy Admin or Managed Server containers.



3. Periodic Updates:

Update Docker images as needed and redeploy to ECS.





---

This plan is a condensed version of all steps we discussed earlier. Let me know if you'd like more details on any specific part!

