pipeline {
    agent any

    parameters {
        choice(name: 'ENVIRONMENT', choices: ['int', 'qa', 'stress', 'prod'], description: 'Choose the environment to run the scripts')
    }

    stages {
        stage('Run SQL Scripts') {
            steps {
                script {
                    def envConfig = [
                        'int'   : [server: '10.0.0.1', sshCreds: 'int-ssh-credentials-id', dbCreds: 'int-db-credentials-id', dbName: 'int_db'],
                        'qa'    : [server: '10.0.0.2', sshCreds: 'qa-ssh-credentials-id', dbCreds: 'qa-db-credentials-id', dbName: 'qa_db'],
                        'stress': [server: '10.0.0.3', sshCreds: 'stress-ssh-credentials-id', dbCreds: 'stress-db-credentials-id', dbName: 'stress_db'],
                        'prod'  : [server: '10.0.0.4', sshCreds: 'prod-ssh-credentials-id', dbCreds: 'prod-db-credentials-id', dbName: 'prod_db']
                    ]

                    def config = envConfig[params.ENVIRONMENT]

                    withCredentials([usernamePassword(credentialsId: config.dbCreds, usernameVariable: 'DB_USER', passwordVariable: 'DB_PASS')]) {
                        sshagent(credentials: [config.sshCreds]) {
                            sh """
                                ssh -o StrictHostKeyChecking=no user@${config.server} '
                                    sqlplus -s $DB_USER/$DB_PASS@${config.dbName} @/opt/jboss/db_scripts/sql1.sql; sleep 5
                                    sqlplus -s $DB_USER/$DB_PASS@${config.dbName} @/opt/jboss/db_scripts/sql2.sql; sleep 5
                                    sqlplus -s $DB_USER/$DB_PASS@${config.dbName} @/opt/jboss/db_scripts/sql3.sql
                                '
                            """
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution completed'
        }
    }
}